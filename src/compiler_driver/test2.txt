function malloc(size_bytes: u64) -> *own void;
function free(alloc: *own void);
function printf(format: *[u8], ..) -> u32;

implement [i32; 2] {
    function x(self: *Self) -> i32 {
        return self[0];
    }

    function y(self: *Self) -> i32 {
        return self[1];
    }
}

function main() -> i32 {
    let vector: [i32; 2] = [4, 8];
    printf("(%d, %d)\n", vector.x(), vector.y());
    return 0;
}

module thing {
    import super::*;

    struct Thing {
        x: *own Test,
    }
}

struct Test {
    a: *own test::Test,
    b: *own test::test::Test,
    c: *own thing::Thing,
}

module test {
    import super::thing::Thing;

    struct Test {
        a: *own super::Test,
        b: *own test::Test,
        c: *own Thing,
    }

    module test {
        import super::Thing;

        struct Test {
            a: *own super::super::Test,
            b: *own super::Test,
            c: *own Thing,
        }
    }
}
