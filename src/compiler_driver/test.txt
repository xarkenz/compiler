struct CFile;

function fopen(filename: *[u8], mode: *[u8]) -> *own CFile;
function fclose(file: *own CFile) -> i32;
function feof(file: *mut CFile) -> i32;
function fgets(buffer: *mut [u8], limit: i32, file: *mut CFile) -> *mut [u8];
function printf(format: *[u8], ..) -> u32;

function malloc(size_bytes: u64) -> *own void;
function free(alloc: *own void);
function memcpy(dest: *mut void, src: *void, count: u64) -> *mut void;

function strlen(str: *[u8]) -> u64;
function isdigit(char: i32) -> i32;

implement u8 {
    function swap(self: *mut u8, other: *mut u8) {
        let temp: u8 = *self;
        *self = *other;
        *other = temp;
    }
}

implement u64 {
    function max(self: u64, other: u64) -> u64 {
        if (self > other) {
            return self;
        } else {
            return other;
        }
    }
}

struct Str {
    ptr: *[u8],
    length: u64,
}

struct MutStr {
    ptr: *mut [u8],
    length: u64,
}

struct OwnStr {
    ptr: *own [u8],
    length: u64,
}

struct String {
    str: OwnStr,
    capacity: u64,
}

implement String {
    function new() -> String {
        return String {
            str: OwnStr {
                ptr: null,
                length: 0,
            },
            capacity: 0,
        };
    }

    function del(self: String) {
        free(self.str.ptr);
    }

    function as_str(self: *String) -> Str {
        return Str {
            ptr: self.str.ptr,
            length: self.str.length,
        };
    }

    function grow_by(self: *mut String, additional: u64) {
        let required_capacity: u64 = self.capacity + additional;
        let capacity: u64 = u64::max(self.capacity * 2, required_capacity);
        let mut ptr: *own [u8] = malloc(sizeof(u8) * capacity);

        memcpy(ptr, self.str.ptr, self.str.length);
        free(self.str.ptr);

        self.str.ptr = ptr;
        self.capacity = capacity;
    }

    function push(self: *mut String, ch: u8) {
        if (self.str.length == self.capacity) {
            String::grow_by(self, 1);
        }

        self.str.ptr[self.str.length] = ch;
        self.str.length += 1;
    }

    function insert(self: *mut String, mut index: u64, mut ch: u8) {
        if (self.str.length == self.capacity) {
            String::grow_by(self, 1);
        }

        while (index < self.str.length) {
            u8::swap(&ch, &self.str.ptr[index]);
            index += 1;
        }

        self.str.ptr[self.str.length] = ch;
        self.str.length += 1;
    }
}

function fibonacci(limit: i32) -> i32 {
    let mut a: i32 = 0;
    let mut b: i32 = 1;

    while (b < limit) {
        let temp: i32 = a + b;
        a = b;
        b = temp;
    }

    return a;
}

function gcd(mut a: u32, mut b: u32) -> u32 {
    while (b >= 1) {
        let temp: u32 = a % b;
        a = b;
        b = temp;
    }

    return a;
}

function aoc_01_p1() {
    let mut input: *own CFile = fopen("day01.txt", "r");
    if (input == null) {
        printf("unable to open input file\n");
        return;
    }

    let mut calibration_sum: u32 = 0;

    let mut line: [u8; 100];
    while (fgets(&line, 100, input) != null) {
        // Start at the beginning of the line
        let mut index: u64 = 0;

        // Find the first digit
        while (isdigit(line[index] as i32) == 0) {
            index += 1;
        }
        let calibration_value: u32 = (line[index] - '0') as u32;
        
        // Go to the end of the line
        index = strlen(&line) - 1;

        // Backtrack to find the last digit
        while (isdigit(line[index] as i32) == 0) {
            index -= 1;
        }
        let calibration_value: u32 = calibration_value * 10 + (line[index] - '0') as u32;

        // Add the found value to the sum
        calibration_sum += calibration_value;
    }

    fclose(input);

    printf("[01p1] Sum of calibration values: %d\n", calibration_sum);
}

struct Node {
    value: *[u8],
    next: *own Node,
}

function omg_linked_list(values: *[*[u8]], value_count: u64) {
    let mut head: *own Node = null;

    let mut index: u64 = 0;
    while (index < value_count) {
        let mut node: *own Node = malloc(sizeof(Node));
        *node = Node {
            value: values[index],
            next: head,
        };
        head = node;

        index += 1;
    }

    printf("Reversed:\n");
    while (head != null) {
        let node: *own Node = head;

        printf("%s\n", node.value);
        head = node.next;

        free(node);
    }
}

struct Student {
    name: *[u8],
    age: u32,
    grades: [u32; 4],
}

function student_stuff() {
    let joe_age: u32 = 97;
    let joe_calculus_grade_before_curve: u32 = 47;

    let joe: Student = Student {
        age: joe_age,
        grades: [80, 100, 92, joe_calculus_grade_before_curve + 15],
        name: "Joe Mama",
    };

    printf("Name: %s\n", joe.name);
    printf("Age: %u\n", joe.age);
    printf("Grades: %u, %u, %u, %u\n", joe.grades[0], joe.grades[1], joe.grades[2], joe.grades[3]);
}

implement i64 {
    function to_string(mut self: i64) -> String {
        let mut string: String = String::new();

        if (self == 0) {
            String::push(&string, '0');
        }
        else {
            let is_negative: bool = self < 0;
            if (is_negative) {
                self = -self;
            }

            while (self != 0) {
                String::insert(&string, 0, (self % 10) as u8 + '0');
                self /= 10;
            }
            if (is_negative) {
                String::insert(&string, 0, '-');
            }
        }

        return string;
    }
}

function main() -> i32 {
    aoc_01_p1();

    student_stuff();

    let values: [*[u8]; 4] = [
        "Value 1",
        "Value 2",
        "Value 3",
        "Value 4",
    ];

    omg_linked_list(&values, 4);

    let mut string: String = String::new();
    String::push(&string, 'H');
    String::push(&string, 'e');
    String::push(&string, 'l');
    String::push(&string, 'l');
    String::push(&string, 'o');
    String::push(&string, ' ');
    String::push(&string, 'w');
    String::push(&string, 'o');
    String::push(&string, 'r');
    String::push(&string, 'l');
    String::push(&string, 'd');
    String::push(&string, '!');
    String::push(&string, '\0');
    let str: Str = String::as_str(&string);
    printf("%s\n", str.ptr);
    String::del(string);

    let mut number_string: String = i64::to_string(-12345);
    String::push(&number_string, '\0');
    printf("i64::to_string: \"%s\"\n", number_string.str.ptr);
    String::del(number_string);

    return 0;
}
