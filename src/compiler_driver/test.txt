function printf(format: const *const [u8], ..) -> u32;
function malloc(size_bytes: u64) -> *void;
function free(alloc: *void);

function fibonacci(limit: i32) -> i32 {
    let a: i32 = 0;
    let b: i32 = 1;

    while (b < limit) {
        let temp: i32 = a + b;
        a = b;
        b = temp;
    }

    return a;
}

function gcd(a: u32, b: u32) -> u32 {
    while (b >= 1) {
        let temp: u32 = a % b;
        a = b;
        b = temp;
    }

    return a;
}

function do_some_pointing() {
    let a: i32;
    let b: i32;
    let c: i32;
    a = b = c = 3;
    printf("a: %d\n", a);
    printf("b: %d\n", b);
    printf("c: %d\n", c);

    let x: i32 = 0;
    printf("x: %d\n", x);
    let y: *i32 = &x;
    *y = 1;
    printf("*y: %d\n", x);
    let z: **i32 = &y;
    **z = 2;
    printf("**z: %d\n", x);
}

let my_string_ptr: const *const [u8] = "assigning string to pointer (%s)\n";

function main() -> i32 {
    printf("fibonacci: %d\n", fibonacci(1000));
    printf("gcd: %u\n", gcd(18, 45));

    do_some_pointing();

    let my_string_array: [u8; 14] = *"i am a string";
    printf(my_string_ptr, &my_string_array);
    printf("\"%s\"[10]: '%c'\n", &my_string_array, my_string_array[10]);
    my_string_array[10] = 'o';
    printf("\"%s\"[10]: '%c'\n", &my_string_array, my_string_array[10]);
    printf("%c\n", (*my_string_ptr)[0]);

    let block: *[u8] = malloc(sizeof(u8) * 3) as *[u8];
    (*block)[0] = 'h';
    (*block)[1] = 'i';
    (*block)[2] = '\0';
    printf("%s\n", block);
    free(block as *void);

    return 0;
}
