function malloc(size_bytes: u64) -> *own void;
function free(alloc: *own void);
function printf(format: *[u8], ..) -> u32;

struct LinkedListNode {
    value: *own void,
    next: *own LinkedListNode,
}

struct SinglyLinkedList {
    head: *own LinkedListNode,
}

implement SinglyLinkedList {
    function new() -> Self {
        return SinglyLinkedList {
            head: null,
        };
    }

    function front(self: *Self) -> *void {
        if (self.head == null) {
            return null;
        }
        else {
            return self.head.value;
        }
    }

    function push_front(self: *mut Self, value: *own void) {
        let mut new_node: *own LinkedListNode = malloc(sizeof(LinkedListNode));
        *new_node = LinkedListNode {
            value: value,
            next: self.head,
        };
        self.head = new_node;
    }

    function pop_front(self: *mut Self) -> *own void {
        if (self.head == null) {
            return null;
        }
        else {
            let front: *own LinkedListNode = self.head;
            let value: *own void = front.value;
            self.head = front.next;
            free(front);
            return value;
        }
    }
}

struct BinaryTreeNode {
    key: *own void,
    left: *own BinaryTreeNode,
    right: *own BinaryTreeNode,
}

struct BinaryTree {
    root: *own BinaryTreeNode,
    comparator: function(*void, *void) -> i32,
}

implement BinaryTree {
    function new(comparator: function(*void, *void) -> i32) -> Self {
        return BinaryTree {
            root: null,
            comparator: comparator,
        };
    }

    function insert(self: *mut Self, key: *own void) -> *own void {
        let mut current_ptr: *mut *own BinaryTreeNode = &self.root;
        while (*current_ptr != null) {
            let ordering: i32 = self.comparator(key, (*current_ptr).key);
            if (ordering < 0) {
                current_ptr = &(*current_ptr).left;
            }
            else if (ordering > 0) {
                current_ptr = &(*current_ptr).right;
            }
            else {
                let replaced_key: *own void = (*current_ptr).key;
                (*current_ptr).key = key;
                return replaced_key;
            }
        }
        let mut new_node: *own BinaryTreeNode = malloc(sizeof(BinaryTreeNode));
        *new_node = BinaryTreeNode {
            key: key,
            left: null,
            right: null,
        };
        *current_ptr = new_node;
        return null;
    }

    function contains(self: *Self, key: *void) -> bool {
        let mut current: *BinaryTreeNode = self.root;
        while (current != null) {
            let ordering: i32 = self.comparator(key, current.key);
            if (ordering < 0) {
                current = current.left;
            }
            else if (ordering > 0) {
                current = current.right;
            }
            else {
                return true;
            }
        }
        return false;
    }
}

implement i32 {
    function cmp(self: *Self, other: *Self) -> i32 {
        if (*self < *other) {
            return -1;
        }
        else if (*self > *other) {
            return +1;
        }
        else {
            return 0;
        }
    }
}

function main() -> i32 {
    let mut list: SinglyLinkedList = SinglyLinkedList::new();
    let mut i: i32 = 1;
    while (i <= 5) {
        let mut value: *own i32 = malloc(sizeof(i32));
        *value = i;
        printf("push: %d\n", *value);
        list.push_front(value);
        i += 1;
    }
    let mut value: *own i32;
    while ((value = list.pop_front()) != null) {
        printf("pop: %d\n", *value);
    }
    
    let mut bst: BinaryTree = BinaryTree::new(i32::cmp);
    let mut i: i32 = 0;
    while (i < 8) {
        let mut key: *own i32 = malloc(sizeof(i32));
        *key = (i * 7) % 11;
        printf("insert: %d\n", *key);
        bst.insert(key);
        i += 1;
    }
    let mut i: i32 = 0;
    while (i < 11) {
        let mut is_contained: *[u8];
        if (bst.contains(&i)) {
            is_contained = "yes";
        }
        else {
            is_contained = "no";
        }
        printf("contains %d: %s\n", i, is_contained);
        i += 1;
    }
    return 0;
}