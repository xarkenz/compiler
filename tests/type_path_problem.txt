implement [util::AlsoInt; 2] {
    function x(self: *Self) -> util::Int {
        return self[0];
    }
}

import <[i32; 2]>::x;

import <[util::Int; 2]>::x as get_x;

import <[util::AlsoInt; 2]>::y as get_y;

implement [util::Int; 2] {
    function y(self: *Self) -> util::AlsoInt {
        return self[1];
    }
}

module util {
    import Int as AlsoInt;

    import i32 as Int;
}

foreign function main() -> i32 {
    let arr: [util::Int; 2] = [5, 7];
    printf("(%d, %d)", get_x(&arr), get_y(&arr));
    return 0;
}

foreign function printf(format: *[u8], ..) -> i32;
