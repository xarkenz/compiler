// (1) = first (outline) pass
// (2) = second (fill) pass

module merge {
    // (1) namespace ::module {merge: module}
    // (1) namespace ::merge {}

    module first {
        // (1) namespace ::merge {first: module}
        // (1) namespace ::merge::first {}

        import target::MyType::my_method;
        // (1) namespace ::merge::first {my_method: alias(::merge::first::target::MyType::my_method)}
        // (2) namespace ::merge::first {my_method: alias(::merge::target::MyType::my_method), First: type($1), target: alias(..)}

        struct First {
            member: target::MyType,
        }
        // (1) type $0: undef
        // (1) namespace ::merge::first {my_method: alias(..), First: type($0)}
        // (2) type $0: struct First {member: $2}

        import super::target;
        // (1) namespace ::merge::first {my_method: alias(..), First: type($0), target: alias(::merge::target)}
    }

    module second {
        // (1) namespace ::merge {first: module, second: module}
        // (1) namespace ::merge::second {}

        import target::MyType::my_method;
        // (1) namespace ::merge::second {my_method: alias(::merge::second::target::MyType::my_method)}
        // (2) namespace ::merge::second {my_method: alias(::merge::target::MyType::my_method), Second: type($1), target: alias(..)}

        struct Second {
            member: target::MyType,
        }
        // (1) type $1: undef
        // (1) namespace ::merge::second {my_method: alias(..), Second: type($1)}
        // (2) type $1: struct Second {member: $2}

        import super::target;
        // (1) namespace ::merge::second {my_method: alias(..), Second: type($1), target: alias(::merge::target)}
    }

    module target {
        // (1) namespace ::merge {first: module, second: module, target: module}
        // (1) namespace ::merge::target {}

        struct MyType {}
        // (1) type $2: undef
        // (1) namespace ::merge::target {MyType: type($2)}
        // (2) type $2: struct MyType {}

        implement MyType {
            function my_method() {}
            // (2) namespace ::merge::target::MyType {my_method: value(function() -> void)}
        }
    }
}

// TYPES
// $0 (::merge::first::First) => struct First {member: $2}
// $1 (::merge::second::Second) => struct Second {member: $2}
// $2 (::merge::target::MyType) => struct MyType {}

// SYMBOLS
// ::merge => module(::merge)
// ::merge::first => module(::merge::first)
// ::merge::first::my_method => alias(::merge::target::MyType::my_method)
// ::merge::first::First => type($0)
// ::merge::first::target => alias(::merge::target)
// ::merge::second => module(::merge::second)
// ::merge::second::my_method => alias(::merge::target::MyType::my_method)
// ::merge::second::Second => type($1)
// ::merge::second::target => alias(::merge::target)
// ::merge::target => module(::merge::target)
// ::merge::target::MyType => type($2)
// ::merge::target::MyType::my_method => value(function() -> void)
