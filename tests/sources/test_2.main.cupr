module libc;

foreign function main() -> i32 {
    let vector: [i32; 2] = [4, 8];
    libc::printf("(%d, %d)\n", vector.x(), vector.y());
    return 0;
}

implement [i32; 2] {
    function x(self: *Self) -> i32 {
        return self[0];
    }

    function y(self: *Self) -> i32 {
        return self[1];
    }
}

struct First {}

module thing {
    import super::*;

    struct Thing {
        x: *Test,
        y: *First,
        z: *Self,
    }
}

struct Test {
    a: *test::Test,
    b: *test::test::Test,
    c: *thing::Thing,
}

module test {
    import super::thing::Thing;

    struct Test {
        a: *super::Test,
        b: *test::Test,
        c: *Thing,
    }

    module test {
        import super::Thing;
        import super::Test as SuperTest;

        implement Test {
            function do_thing(self: *Self, x: i32) -> i32 {
                return x * x;
            }
        }

        struct Test {
            a: *super::super::Test,
            b: *SuperTest,
            c: *Thing,
        }
    }
}
